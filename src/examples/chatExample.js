import geminiService from '../services/GeminiService.js';

/**
 * Exemplo de chat simples
 */
async function simpleChatExample() {
  console.log('=== Exemplo: Chat Simples ===\n');
  
  try {
    // Inicia o chat
    const chat = await geminiService.startChat();
    
    // Primeira mensagem
    console.log('Usu√°rio: Ol√°! Qual √© o seu nome?');
    let response = await geminiService.sendMessage(chat, 'Ol√°! Qual √© o seu nome?');
    console.log(`Gemini: ${response}\n`);
    
    // Segunda mensagem
    console.log('Usu√°rio: Pode me explicar como funciona a fotoss√≠ntese?');
    response = await geminiService.sendMessage(chat, 'Pode me explicar como funciona a fotoss√≠ntese?');
    console.log(`Gemini: ${response}\n`);
    
    // Terceira mensagem
    console.log('Usu√°rio: Obrigado pela explica√ß√£o!');
    response = await geminiService.sendMessage(chat, 'Obrigado pela explica√ß√£o!');
    console.log(`Gemini: ${response}\n`);
    
    console.log('='.repeat(50) + '\n');
  } catch (error) {
    console.error('Erro no chat:', error.message);
  }
}

/**
 * Exemplo de chat com hist√≥rico inicial
 */
async function chatWithHistoryExample() {
  console.log('=== Exemplo: Chat com Hist√≥rico ===\n');
  
  try {
    // Hist√≥rico inicial da conversa
    const history = [
      {
        role: 'user',
        parts: [{ text: 'Voc√™ √© um assistente especializado em culin√°ria.' }]
      },
      {
        role: 'model',
        parts: [{ text: 'Ol√°! Sou seu assistente culin√°rio. Posso ajud√°-lo com receitas, t√©cnicas de cozimento, dicas de ingredientes e muito mais. Como posso ajud√°-lo hoje?' }]
      }
    ];
    
    // Inicia chat com hist√≥rico
    const chat = await geminiService.startChat(history);
    
    // Mensagem sobre receitas
    console.log('Usu√°rio: Preciso de uma receita r√°pida para o jantar usando frango.');
    let response = await geminiService.sendMessage(chat, 'Preciso de uma receita r√°pida para o jantar usando frango.');
    console.log(`Chef Gemini: ${response}\n`);
    
    // Pergunta sobre substitui√ß√µes
    console.log('Usu√°rio: Posso substituir o frango por peixe nessa receita?');
    response = await geminiService.sendMessage(chat, 'Posso substituir o frango por peixe nessa receita?');
    console.log(`Chef Gemini: ${response}\n`);
    
    console.log('='.repeat(50) + '\n');
  } catch (error) {
    console.error('Erro no chat com hist√≥rico:', error.message);
  }
}

/**
 * Exemplo de chat com configura√ß√µes personalizadas
 */
async function customChatExample() {
  console.log('=== Exemplo: Chat com Configura√ß√µes Personalizadas ===\n');
  
  try {
    const options = {
      temperature: 0.3,    // Mais conservador
      maxTokens: 300,      // Respostas mais concisas
      topP: 0.7,          // Menos diversidade
      topK: 20            // Vocabul√°rio mais focado
    };
    
    const chat = await geminiService.startChat([], options);
    
    console.log('Usu√°rio: Preciso de uma explica√ß√£o t√©cnica sobre machine learning.');
    const response = await geminiService.sendMessage(chat, 'Preciso de uma explica√ß√£o t√©cnica sobre machine learning.');
    console.log(`Gemini (modo t√©cnico): ${response}\n`);
    
    console.log('='.repeat(50) + '\n');
  } catch (error) {
    console.error('Erro no chat personalizado:', error.message);
  }
}

/**
 * Executa todos os exemplos de chat
 */
export async function runChatExamples() {
  console.log('üí¨ Iniciando exemplos de chat...\n');
  
  await simpleChatExample();
  await chatWithHistoryExample();
  await customChatExample();
  
  console.log('‚úÖ Exemplos de chat conclu√≠dos!');
}

// Executa os exemplos se o arquivo for executado diretamente
if (process.argv[1] === new URL(import.meta.url).pathname) {
  runChatExamples();
} 