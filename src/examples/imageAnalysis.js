import geminiService from '../services/GeminiService.js';
import imageHelper from '../utils/imageHelper.js';

/**
 * Exemplo de an√°lise de imagem simples
 */
async function simpleImageAnalysis() {
  console.log('=== Exemplo: An√°lise de Imagem Simples ===\n');
  
  try {
    // Exemplo com imagem base64 fict√≠cia (voc√™ deve substituir por uma imagem real)
    const exampleBase64 = 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNk+M9QDwADhgGAWjR9awAAAABJRU5ErkJggg==';
    
    const prompt = "Descreva o que voc√™ v√™ nesta imagem de forma detalhada.";
    console.log(`Prompt: ${prompt}\n`);
    
    const response = await geminiService.analyzeImage(prompt, exampleBase64, 'image/png');
    console.log('An√°lise da imagem:');
    console.log(response);
    console.log('\n' + '='.repeat(50) + '\n');
  } catch (error) {
    console.error('Erro na an√°lise de imagem:', error.message);
  }
}

/**
 * Exemplo de an√°lise de imagem a partir de arquivo
 */
async function analyzeImageFromFile(imagePath) {
  console.log('=== Exemplo: An√°lise de Imagem de Arquivo ===\n');
  
  try {
    console.log(`Analisando imagem: ${imagePath}\n`);
    
    // Prepara a imagem
    const imageData = await imageHelper.prepareImageForAnalysis(imagePath);
    
    const prompt = "Analise esta imagem e me diga: 1) O que est√° acontecendo na cena, 2) Quais objetos voc√™ identifica, 3) Que cores predominam na imagem.";
    console.log(`Prompt: ${prompt}\n`);
    
    const response = await geminiService.analyzeImage(prompt, imageData.data, imageData.mimeType);
    console.log('An√°lise detalhada:');
    console.log(response);
    console.log('\n' + '='.repeat(50) + '\n');
  } catch (error) {
    console.error('Erro na an√°lise de arquivo:', error.message);
  }
}

/**
 * Exemplo de an√°lise espec√≠fica - reconhecimento de texto em imagem
 */
async function textRecognitionExample(imagePath) {
  console.log('=== Exemplo: Reconhecimento de Texto (OCR) ===\n');
  
  try {
    const imageData = await imageHelper.prepareImageForAnalysis(imagePath);
    
    const prompt = "Extraia todo o texto vis√≠vel nesta imagem. Se n√£o houver texto, me informe.";
    console.log(`Prompt: ${prompt}\n`);
    
    const response = await geminiService.analyzeImage(prompt, imageData.data, imageData.mimeType);
    console.log('Texto extra√≠do:');
    console.log(response);
    console.log('\n' + '='.repeat(50) + '\n');
  } catch (error) {
    console.error('Erro no reconhecimento de texto:', error.message);
  }
}

/**
 * Exemplo de an√°lise especializada - identifica√ß√£o de objetos
 */
async function objectIdentificationExample(imagePath) {
  console.log('=== Exemplo: Identifica√ß√£o de Objetos ===\n');
  
  try {
    const imageData = await imageHelper.prepareImageForAnalysis(imagePath);
    
    const prompt = `Analise esta imagem e forne√ßa:
    1. Lista de todos os objetos identificados
    2. Localiza√ß√£o aproximada de cada objeto na imagem
    3. Caracter√≠sticas relevantes de cada objeto
    4. Rela√ß√µes entre os objetos na cena`;
    
    console.log(`Prompt: ${prompt}\n`);
    
    const response = await geminiService.analyzeImage(prompt, imageData.data, imageData.mimeType);
    console.log('Identifica√ß√£o de objetos:');
    console.log(response);
    console.log('\n' + '='.repeat(50) + '\n');
  } catch (error) {
    console.error('Erro na identifica√ß√£o de objetos:', error.message);
  }
}

/**
 * Fun√ß√£o para demonstrar an√°lise de m√∫ltiplas imagens
 */
async function multipleImageAnalysis(imagePaths) {
  console.log('=== Exemplo: An√°lise de M√∫ltiplas Imagens ===\n');
  
  for (let i = 0; i < imagePaths.length; i++) {
    const imagePath = imagePaths[i];
    console.log(`üì∏ Analisando imagem ${i + 1}/${imagePaths.length}: ${imagePath}`);
    
    try {
      const imageData = await imageHelper.prepareImageForAnalysis(imagePath);
      const prompt = "Resuma o conte√∫do desta imagem em 2-3 frases.";
      
      const response = await geminiService.analyzeImage(prompt, imageData.data, imageData.mimeType);
      console.log(`Resumo: ${response}\n`);
    } catch (error) {
      console.error(`Erro ao analisar ${imagePath}:`, error.message);
    }
  }
  
  console.log('='.repeat(50) + '\n');
}

/**
 * Executa todos os exemplos de an√°lise de imagem
 */
export async function runImageAnalysisExamples(imagePaths = []) {
  console.log('üñºÔ∏è Iniciando exemplos de an√°lise de imagem...\n');
  
  // Sempre executa o exemplo simples
  await simpleImageAnalysis();
  
  // Executa exemplos com arquivos se fornecidos
  if (imagePaths.length > 0) {
    const firstImage = imagePaths[0];
    
    await analyzeImageFromFile(firstImage);
    await textRecognitionExample(firstImage);
    await objectIdentificationExample(firstImage);
    
    if (imagePaths.length > 1) {
      await multipleImageAnalysis(imagePaths);
    }
  } else {
    console.log('‚ÑπÔ∏è Para testar an√°lise de imagens reais, execute:');
    console.log('node src/examples/imageAnalysis.js caminho/para/imagem.jpg\n');
  }
  
  console.log('‚úÖ Exemplos de an√°lise de imagem conclu√≠dos!');
}

/**
 * Exemplo de uso para diferentes tipos de an√°lise
 */
export const analysisTypes = {
  general: "Descreva esta imagem de forma geral.",
  detailed: "Forne√ßa uma an√°lise detalhada desta imagem, incluindo objetos, cores, composi√ß√£o e contexto.",
  technical: "Analise os aspectos t√©cnicos desta imagem: qualidade, resolu√ß√£o aparente, tipo de fotografia, ilumina√ß√£o.",
  artistic: "Analise os elementos art√≠sticos desta imagem: composi√ß√£o, uso de cores, estilo, impacto visual.",
  ocr: "Extraia todo o texto vis√≠vel nesta imagem.",
  objects: "Liste e localize todos os objetos vis√≠veis nesta imagem.",
  people: "Identifique e descreva pessoas nesta imagem (sem identificar indiv√≠duos espec√≠ficos).",
  scene: "Descreva o tipo de ambiente ou cena retratada nesta imagem."
};

// Executa os exemplos se o arquivo for executado diretamente
if (process.argv[1] === new URL(import.meta.url).pathname) {
  const imageArgs = process.argv.slice(2);
  runImageAnalysisExamples(imageArgs);
} 